{"version":3,"file":"static/js/93.c3f70de4.chunk.js","mappings":"iSAEaA,EAAOC,EAAAA,GAAAA,GAAH,6HAQJC,EAAOD,EAAAA,GAAAA,GAAH,wFAMJE,EAAQF,EAAAA,GAAAA,IAAH,0DAKLG,EAAOH,EAAAA,GAAAA,EAAH,yF,SC8BjB,MA7CA,WACE,IAAQI,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA8BE,EAAAA,EAAAA,UAAS,MAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KAaA,OAXAC,EAAAA,EAAAA,YAAU,YACR,iBAAC,gHAE0BC,EAAAA,EAAAA,IAAgBN,GAF1C,gBAEWO,EAFX,EAEWA,KACRH,EAAWG,GAHd,gDAKGC,MAAM,KAAMC,SALf,wDAAD,EAQD,GAAE,CAACT,KAGF,8BACGG,GAAWA,EAAQO,OAAS,GAC3B,SAACf,EAAD,UACGQ,EAAQQ,KAAI,YAAqD,IAAlDC,EAAiD,EAAjDA,GAAIC,EAA6C,EAA7CA,cAAeC,EAA8B,EAA9BA,UAAWC,EAAmB,EAAnBA,aAC5C,OACE,UAAClB,EAAD,YACE,SAACC,EAAD,CACEkB,IAAG,yCAAoCD,GACvCE,IAAKJ,EACLK,OAAO,SAET,4BACE,UAACnB,EAAD,YACE,SAAC,MAAD,IACCc,MAEH,UAACd,EAAD,WAAM,cAAYe,UAXXF,EAed,OAGH,uBAAG,+DAIV,C,6MC9CDO,EAAAA,EAAAA,SAAAA,QAAyB,+BACzBA,EAAAA,EAAAA,SAAAA,OAAwB,CACtBC,QAAS,oCAGJ,IAAMC,EAAgB,mCAAG,2GAAOC,EAAP,+BAAc,EAAd,kBAELH,EAAAA,EAAAA,IAAU,sBAAuB,CACtDI,OAAQ,CACND,KAAAA,KAJwB,uBAEpBE,EAFoB,EAEpBA,KAFoB,kBAOrBA,GAPqB,gCAS5BC,EAAAA,GAAAA,MAAY,2BATgB,yDAAH,qDAahBC,EAAgB,mCAAG,WAAOC,GAAP,8FAAcL,EAAd,+BAAqB,EAArB,kBAELH,EAAAA,EAAAA,IAAU,gBAAiB,CAChDI,OAAQ,CACNI,MAAAA,EACAL,KAAAA,KALwB,uBAEpBE,EAFoB,EAEpBA,KAFoB,kBAQrBA,GARqB,gCAU5BC,EAAAA,GAAAA,MAAY,2BAVgB,yDAAH,sDAchBG,EAAY,mCAAG,WAAM5B,GAAN,kGAEDmB,EAAAA,EAAAA,IAAA,iBAAoBnB,IAFnB,uBAEhBwB,EAFgB,EAEhBA,KAFgB,kBAGjBA,GAHiB,gCAKxBC,EAAAA,GAAAA,MAAY,2BALY,yDAAH,sDASZnB,EAAe,mCAAG,WAAMN,GAAN,kGAEJmB,EAAAA,EAAAA,IAAA,iBAAoBnB,EAApB,aAFI,uBAEnBwB,EAFmB,EAEnBA,KAFmB,kBAGpBA,GAHoB,gCAK3BC,EAAAA,GAAAA,MAAY,2BALe,yDAAH,sDASfI,EAAe,mCAAG,WAAM7B,GAAN,kGAEJmB,EAAAA,EAAAA,IAAA,iBAAoBnB,EAApB,aAFI,uBAEnBwB,EAFmB,EAEnBA,KAFmB,kBAGpBA,GAHoB,gCAK3BC,EAAAA,GAAAA,MAAY,2BALe,yDAAH,qD","sources":["components/Cast/Cast.styled.jsx","components/Cast/Cast.jsx","utils/themoviedbAPI.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const List = styled.ul`\n  list-style: none;\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  margin-top: 15px;\n`;\n\nexport const Item = styled.li`\n  display: flex;\n  /* flex-direction: column; */\n  gap: 5px;\n`;\n\nexport const Photo = styled.img`\n  height: 100px;\n  width: auto;\n`;\n\nexport const Text = styled.p`\n  margin-bottom: 5px;\n  display: flex;\n  align-items: center;\n`;\n","import { useEffect, useState } from 'react';\nimport { RxDotFilled } from 'react-icons/rx';\nimport { useParams } from 'react-router-dom';\nimport { getMovieCredits } from 'utils/themoviedbAPI';\nimport { Item, List, Photo, Text } from './Cast.styled';\n\nfunction Cast() {\n  const { movieId } = useParams();\n  const [credits, setCredits] = useState(null);\n\n  useEffect(() => {\n    (async () => {\n      try {\n        const { cast } = await getMovieCredits(movieId);\n        setCredits(cast);\n      } catch (error) {\n        alert(error.message);\n      }\n    })();\n  }, [movieId]);\n\n  return (\n    <>\n      {credits && credits.length > 0 ? (\n        <List>\n          {credits.map(({ id, original_name, character, profile_path }) => {\n            return (\n              <Item key={id}>\n                <Photo\n                  src={`https://image.tmdb.org/t/p/w200${profile_path}`}\n                  alt={original_name}\n                  height=\"100\"\n                />\n                <div>\n                  <Text>\n                    <RxDotFilled />\n                    {original_name}\n                  </Text>\n                  <Text>Character: {character}</Text>\n                </div>\n              </Item>\n            );\n          })}\n        </List>\n      ) : (\n        <p>We don't have any information about casts for this movie.</p>\n      )}\n    </>\n  );\n}\n\nexport default Cast;\n","import axios from 'axios';\nimport { toast } from 'react-toastify';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\naxios.defaults.params = {\n  api_key: '771e9e546d4a20d6aadc5378684f07f4',\n};\n\nexport const getPopularMovies = async (page = 1) => {\n  try {\n    const { data } = await axios.get('/trending/movie/day', {\n      params: {\n        page,\n      },\n    });\n    return data;\n  } catch (error) {\n    toast.error('Oops, an error occurred');\n  }\n};\n\nexport const getMoviesByQuery = async (query, page = 1) => {\n  try {\n    const { data } = await axios.get('/search/movie', {\n      params: {\n        query,\n        page,\n      },\n    });\n    return data;\n  } catch (error) {\n    toast.error('Oops, an error occurred');\n  }\n};\n\nexport const getMovieById = async movieId => {\n  try {\n    const { data } = await axios.get(`/movie/${movieId}`);\n    return data;\n  } catch (error) {\n    toast.error('Oops, an error occurred');\n  }\n};\n\nexport const getMovieCredits = async movieId => {\n  try {\n    const { data } = await axios.get(`/movie/${movieId}/credits`);\n    return data;\n  } catch (error) {\n    toast.error('Oops, an error occurred');\n  }\n};\n\nexport const getMovieReviews = async movieId => {\n  try {\n    const { data } = await axios.get(`/movie/${movieId}/reviews`);\n    return data;\n  } catch (error) {\n    toast.error('Oops, an error occurred');\n  }\n};\n"],"names":["List","styled","Item","Photo","Text","movieId","useParams","useState","credits","setCredits","useEffect","getMovieCredits","cast","alert","message","length","map","id","original_name","character","profile_path","src","alt","height","axios","api_key","getPopularMovies","page","params","data","toast","getMoviesByQuery","query","getMovieById","getMovieReviews"],"sourceRoot":""}